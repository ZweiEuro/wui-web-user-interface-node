default:
  image: node:20
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      export NPM_PROJECT_URL=$(echo "$CI_PROJECT_URL" | sed "s/${CI_PROJECT_PATH//\//\\/}/api\/v4/g")
      export NPM_REGISTRY_PATHS=$(echo "$CI_PROJECT_URL" | sed "s/${CI_PROJECT_PATH//\//\\/}/api\/v4/g")
      export NPMRC_URL=$(echo "$NPM_REGISTRY_PATHS" |  sed 's/[^:]*[:]//')
      export NPMRC_INSTALL_URL=$(echo "$NPMRC_URL/packages/npm/:_authToken=$OAUTH_TOKEN")
      export NPMRC_PUBLISH_URL=$(echo "$NPMRC_URL/projects/$CI_PROJECT_ID/packages/npm/:_authToken=$OAUTH_TOKEN")
      export NPM_SCOPE=$(echo "$CI_PROJECT_PATH" | sed 's/[/].*$//')
      echo "@$NPM_SCOPE:registry=$NPM_REGISTRY_PATHS/npm/" >> .npmrc
      echo "$NPMRC_INSTALL_URL" >> .npmrc
      echo "$NPMRC_PUBLISH_URL" >> .npmrc
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}

stages:
  - setup
  - test
  - deploy

setup:
  stage: setup
  script:
    - npm ci --include=dev
  tags:
    - setup
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

test-package:
  stage: test
  script:
    - npm run test:ci
  tags:
    - test
  dependencies:
    - setup
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

publish-npm:
  stage: deploy
  dependencies:
    - test-package
    - setup
  script:
    - npm run semantic-release
  only:
    - main
  tags:
    - build
